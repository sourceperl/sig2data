#!/usr/bin/python

# use matplotlib to build a PNG graph

import sys
from datetime import datetime
import time
import numpy as np
import matplotlib
# for use matplotlib without a X display
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import MySQLdb as mdb


# open database
try:
  conn = mdb.connect('192.168.1.40', 'bee_sigfox_sync', '', 'beedb')
except:
  sys.stderr.write("DB connect error\n")
  exit(1)

# create db cursor with access to row by name
c = conn.cursor(mdb.cursors.DictCursor)  

## process RAW message
sql = ("SELECT " +
      "  rx_timestamp, object_id, var_id, " +
      "  date(FROM_UNIXTIME(rx_timestamp)) as date, " +
      "  (MAX(index_p) - MIN(index_p))/1000 AS prod, " +
      "  (MAX(index_n) - MIN(index_n))/1000 AS cons " +
      "FROM " +
      "  sig_index " +
      "WHERE " +
      "  rx_timestamp > UNIX_TIMESTAMP('2013-10-30') AND " + 
      "  object_id = 4 "+
      "GROUP BY " +
      "  date, var_id")
c.execute(sql)
day_records = c.fetchall()

batt_stk   = []
batt_dstk  = []
batt_day   = []

for day_record in day_records:
  # convert UTC timestamp to localtime datetime string
  utc_dt = datetime.fromtimestamp(day_record['rx_timestamp'])
  now_timestamp = time.time()
  offset = (datetime.fromtimestamp(now_timestamp) - 
            datetime.utcfromtimestamp(now_timestamp))
  local_dt = utc_dt + offset
  # add data to lists
  batt_day.append(local_dt.strftime ("%d/%m"))
  batt_stk.append(day_record['prod'])
  batt_dstk.append(day_record['cons']) 

# draw PNG graph
fig, ax = plt.subplots()

fig.patch.set_facecolor('blue')
fig.patch.set_alpha(0.4)

index = np.arange(len(batt_stk))
bar_width = 0.35

error_config = {'ecolor': '0.3'}

rects1 = plt.bar(index, batt_stk, bar_width,
                 alpha=0.7,
                 color='orange',
                 error_kw=error_config,
                 label='stocking')

rects2 = plt.bar(index + bar_width, batt_dstk, bar_width,
                 alpha=0.7,
                 color='green',
                 error_kw=error_config,
                 label='destocking')

plt.xlabel('days')
plt.ylabel('electric charge (in mah)')
plt.title('Lestrem battery reporting')
plt.xticks(index + bar_width, batt_day)
plt.legend()
plt.tight_layout()
plt.savefig("/tmp/lestrem/daily_prod.png",dpi=72)

exit(0)
