#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

import sys
import os
import grp
import signal
import daemon
import lockfile
import string
import time
import datetime
import MySQLdb as mdb
import logging
import logging.handlers
from subprocess import Popen

# some consts
MSG_T_STAT  = 0x02
MSG_T_INDEX = 0x03

# some global vars
main_logger = None

# some functions
def twos_comp(val, bits):
  """compute the 2's comp of int value val"""
  """ex: twos_comp(<int16_t>, 16)"""
  """    twos_comp(<int32_t>, 32)"""
  if( (val&(1<<(bits-1))) != 0 ):
    val = val - (1<<bits)
  return val

# main loop task
def main_loop_task():
  # global vars
  global main_logger

  # open database
  try:
    conn = mdb.connect('localhost', 'bee_sigfox_sync', '', 'beedb')
  except:
    main_logger.critical("DB connect error")

  # create db cursor with access to row by name
  c = conn.cursor(mdb.cursors.DictCursor)

  # retrive the 'id_last_msg_populate'
  c.execute("select * from `sig_vars` where var_name = 'id_last_msg_populate' limit 1;")
  id_last_msg_populate = c.fetchone()['var']

  # process message
  c.execute("select * from `sig_messages` where message_id > '" +
            str(id_last_msg_populate) +"' order by message_id asc limit 1000;")
  messages = c.fetchall()

  for message in messages:
    try:
      # retrieve first fields
      message_id    = message['message_id']
      object_id     = message['object_id']
      msg_timestamp = message['rx_timestamp']
      msg_pld       = message['payload']
      # check message type is clean
      if (message['type'] != "raw"):
        raise SigMsgError("message is not raw type", message_id)
      # check payload is clean
      if not all(c in string.hexdigits for c in msg_pld):
        raise SigMsgError("raw message have no hex char in payload", message_id)
      if len(msg_pld) < 20:
        raise SigMsgError("raw message payload have less than 20 chars", message_id)
      # start decoding
      msg_raw_type = int(msg_pld[0:2], 16)
      # process INDEX msg
      if msg_raw_type == MSG_T_INDEX:
        msg_id_var   = int(msg_pld[2:4], 16)
        msg_index_p  = int(msg_pld[4:12], 16)
        msg_index_n  = int(msg_pld[12:20], 16)

        # insert into database if not already exist
        sql_command = ("INSERT INTO `sig_index` (`object_id`,`var_id`, " +
                       "`rx_timestamp`, `index_p`, `index_n`) " +
                       "SELECT '"+str(object_id)+"', '"+str(msg_id_var)+"', '" +
                       str(msg_timestamp)+"', '"+str(msg_index_p)+"', '" +
                       str(msg_index_n)+"' FROM DUAL WHERE NOT EXISTS ("+
                       "SELECT * FROM `sig_index` "+
                       "WHERE `object_id`="+str(object_id)+" "+
                       "AND `rx_timestamp`="+str(msg_timestamp)+" "+
                       "AND `var_id`="+str(msg_id_var)+" LIMIT 1);")
        main_logger.info("add message ID #%d to sig_index table" % message_id)
        try:
          c.execute(sql_command)
          conn.commit()
        except mdb.IntegrityError as e:
          main_logger.error("SQL Error: %s" % e)
      # process STAT msg
      elif msg_raw_type == MSG_T_STAT:
        msg_id_var    = int(msg_pld[2:4], 16)
        msg_var_max   = twos_comp(int(msg_pld[4:8],   16), 16)
        msg_var_avg   = twos_comp(int(msg_pld[8:12],  16), 16)
        msg_var_min   = twos_comp(int(msg_pld[12:16], 16), 16)
        msg_var_inst  = twos_comp(int(msg_pld[16:20], 16), 16)

        # insert into database if not already exist
        sql_command = ("INSERT INTO `sig_stat` (`object_id`,`var_id`, " +
                       "`rx_timestamp`, `var_max`, `var_avg`, `var_min`, " +
                       "`var_inst`) " +
                       "SELECT '"+str(object_id)+"', '"+str(msg_id_var)+"', '" +
                       str(msg_timestamp)+"', '"+str(msg_var_max)+"', '" +
                       str(msg_var_avg)+"', '"+str(msg_var_min)+"', '" +
                       str(msg_var_inst)+"' FROM DUAL WHERE NOT EXISTS ("+
                       "SELECT * FROM `sig_stat` "+
                       "WHERE `object_id`="+str(object_id)+" "+
                       "AND `rx_timestamp`="+str(msg_timestamp)+" "+
                       "AND `var_id`="+str(msg_id_var)+" LIMIT 1);")
        main_logger.info("add message ID #%d to sig_stat table" % message_id)
        try:
          c.execute(sql_command)
          conn.commit()
        except mdb.IntegrityError as e:
          main_logger.error("SQL Error: %s" % e)
    except SigMsgError as e:
      main_logger.warning("SigMsgError: %s for message id %s" % (e.err_str, e.msg_id))

    # update id_last_msg_populate for next polling
    try:
      c.execute("UPDATE `sig_vars` SET var='"+ str(message_id) + "' "+
                "WHERE var_name='id_last_msg_populate';")
      conn.commit()
    except mdb.IntegrityError as e:
      main_logger.error("SQL Error: %s" % e)


# some class
class SigMsgError(Exception):
    def __init__(self, err_str, msg_id = 0):
        self.err_str = err_str
        self.msg_id  = msg_id

    def __str__(self):
        return self.err_msg


def bee_main_program():
  while True:
    # main daemon code
    main_loop_task()
    # wait next pool
    time.sleep(4)

# startup code
if __name__ == "__main__":
  # some init code
  # log setup
  main_logger = logging.getLogger(__name__)
  main_logger.setLevel(logging.DEBUG)
  filehandler = logging.handlers.RotatingFileHandler("/tmp/beed.log", maxBytes = 1024 * 1024, backupCount = 5)
  formatter = logging.Formatter("%(asctime)s - %(name)s - "+
                                "%(levelname)s - %(message)s")
  filehandler.setFormatter(formatter)
  main_logger.addHandler(filehandler)
  # log startup
  main_logger.info("daemon start")
  # create daemon
  context = daemon.DaemonContext()

  # preserve log handler
  context.files_preserve = [filehandler.stream]

  with context:
    bee_main_program()
